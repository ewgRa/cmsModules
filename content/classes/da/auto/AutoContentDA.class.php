<?php
	/**
	 * Generated by meta builder!
	 * Do not edit this class!
	 * @license http://www.opensource.org/licenses/bsd-license.php BSD
	 * @author Evgeniy Sokolov <ewgraf@gmail.com>
	 */
	abstract class AutoContentDA extends CmsDatabaseRequester
	{
		protected $tableAlias = 'Content';
		
		/**
		 * @return Content
		 */
		public function insert(Content $object)
		{
			$dbQuery = 'INSERT INTO '.$this->getTable().' SET ';
			$queryParts = array();
			$queryParams = array();
			
			if (!is_null($object->getStatus())) {
				$queryParts[] = 'status = ?';
				$queryParams[] = $object->getStatus()->getId();
			}
			
			$dbQuery .= join(', ', $queryParts);
			
			$this->db()->query(
				DatabaseQuery::create()->
				setQuery($dbQuery)->
				setValues($queryParams)
			);
			
			$object->setId($this->db()->getInsertedId());
			
			$this->dropCache();
			
			return $object;
		}

		/**
		 * @return AutoContentDA
		 */
		public function save(Content $object)
		{
			$dbQuery = 'UPDATE '.$this->getTable().' SET ';
			
			$queryParts = array();
			$whereParts = array();
			$queryParams = array();
			
			$queryParts[] = 'status = ?';
			$queryParams[] = $object->getStatus()->getId();
			
			$whereParts[] = 'id = ?';
			$queryParams[] = $object->getId();
			Assert::isNotEmpty($whereParts);
			
			$dbQuery .= join(', ', $queryParts).' WHERE '.join(' AND ', $whereParts);

			$this->db()->query(
				DatabaseQuery::create()->
				setQuery($dbQuery)->
				setValues($queryParams)
			);
			 
			$this->dropCache();
			
			return $object;
		}

		/**
		 * @return Content
		 */
		protected function build(array $array)
		{
			return
				Content::create()->
				setId($array['id'])->
				setStatus(ContentStatus::create($array['status']));
		}

		public function dropCache()
		{
			ContentData::da()->dropCache();
			return parent::dropCache();
		}
	}
?>